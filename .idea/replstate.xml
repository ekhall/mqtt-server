<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1449868842863">{:repl-history {:ide [], :local [&quot;*ns*&quot; &quot;(def system (-main\n              ))&quot; &quot;(def system (-main))&quot; &quot;(start-consumer)&quot; &quot;(def ^:const topic \&quot;nba/scores\&quot;)&quot; &quot;(defn start-consumer\n  [conn ^String username]\n  (mh/subscribe conn\n                [topic]\n                (fn [^String topic _ ^bytes payload]\n                  (println (format \&quot;[consumer] %s received %s\&quot; username (String. payload \&quot;UTF-8\&quot;))))))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [id    (mh/generate-id)\n        conn  (mh/connect \&quot;tcp://127.0.0.1:1883\&quot; id)\n        users [\&quot;joe\&quot; \&quot;aaron\&quot; \&quot;bob\&quot;]]\n    (doseq [u users]\n      (let [c (mh/connect \&quot;tcp://127.0.0.1:1883\&quot; (format \&quot;consumer.%s\&quot; u))]\n        (start-consumer c u)))\n    (mh/publish conn topic \&quot;BOS 101, NYK 89\&quot;)\n    (mh/publish conn topic \&quot;ORL 85, ALT 88\&quot;)\n    (Thread/sleep 100)\n    (mh/disconnect conn)\n    (System/exit 0)))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [id   (mh/generate-id)\n        conn (mh/connect \&quot;tcp://127.0.0.1:1883\&quot; id)]\n    (mh/subscribe conn [\&quot;hello\&quot;] (fn [^String topic _ ^bytes payload]\n                                   (println (String. payload \&quot;UTF-8\&quot;))\n                                   (mh/disconnect conn)\n                                   (System/exit 0)))\n    (mh/publish conn \&quot;hello\&quot; \&quot;Hello, world\&quot;)))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [id   (mh/generate-id)\n        conn (mh/connect \&quot;tcp://127.0.0.1:1883\&quot; id)]\n    (mh/subscribe conn [\&quot;hello\&quot;] (fn [^String topic _ ^bytes payload]\n                                   (println (String. payload \&quot;UTF-8\&quot;))\n                                   ))\n    (mh/publish conn \&quot;hello\&quot; \&quot;Hello, world\&quot;)))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [id   (mh/generate-id)\n        conn (mh/connect \&quot;tcp://127.0.0.1:1883\&quot; id)]\n    (mh/subscribe conn [\&quot;hello\&quot;] (fn [^String topic _ ^bytes payload]\n                                   (println (String. payload \&quot;UTF-8\&quot;))))\n    (mh/publish conn \&quot;hello\&quot; \&quot;Hello, world\&quot;)))&quot; &quot;(def server (-main\n              ))&quot; &quot;(ns mqtt\n  (:gen-class)\n  (:require [clojurewerkz.machine-head.client :as mh]))&quot; &quot;(defn -main\n  [&amp; args]\n  (let [id   \&quot;Clojure\&quot;\n        conn (mh/connect \&quot;tcp://127.0.0.1:1883\&quot; id)]\n    (mh/subscribe conn [\&quot;hello\&quot;] (fn [^String topic _ ^bytes payload]\n                                   (println (String. payload \&quot;UTF-8\&quot;))))\n    (mh/publish conn \&quot;hello\&quot; \&quot;Hello, world\&quot;)))&quot; &quot;(def server (-main))&quot;], :remote []}}</component>
</project>